#include <WiFi.h>
#include "time.h"
#include "BLEDevice.h"
#include <WiFiClientSecure.h>

//CREDENCIALES DEL WI-FI
const char* ssid = "TeknoFriendz"; //NOMBRE DE RED
const char* password = "xxxxxxx"; //CLAVE

const char host[] = "maker.ifttt.com";
const int httpsPort = 443;

String url = "/trigger/ESP32/with/key/ldiVtPqqGcbg98-PGf37sQ_nif7rv6xRbCxxxxxxx"; //LLAVE UNICA

//CONFIGURACION DE FECHA Y HORA
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = -18000;
const int   daylightOffset_sec = 0;
bool darktime = false;
int H;


//CONFIGURACION DE BLE
static BLEAddress *pServerAddress;
BLEScan* pBLEScan;
BLEClient*  pClient;
bool deviceFound = false;
String knownAddresses[] = {"e4:56:9c:61:a6:80"}; //REEMPLAZAR POR LA DIRECCION MAC DEL BEACON
bool cont = true;

class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
    /**
        Called for each advertising BLE server.
    */
    void onResult(BLEAdvertisedDevice advertisedDevice) {
      Serial.print("BLE Advertised Device found: ");
      Serial.println(advertisedDevice.toString().c_str());
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());

      bool known = false;
      for (int i = 0; i < (sizeof(knownAddresses) / sizeof(knownAddresses[0])); i++) {
        if (strcmp(pServerAddress->toString().c_str(), knownAddresses[i].c_str()) == 0) known = true;
      }
      if (known) {
        Serial.print("Dispositivo encontrado: ");
        Serial.println(advertisedDevice.getRSSI());
        if (advertisedDevice.getRSSI() > -80) deviceFound = true;
        else deviceFound = false;
        Serial.println(pServerAddress->toString().c_str());
        advertisedDevice.getScan()->stop();
      }
    }
}; // MyAdvertisedDeviceCallbacks



void setup() {
  //MONITOR SERIAL
  Serial.begin(115200);
  Serial.println("Escanenado...");

  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan(); //create new scan
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster

  //INICIALIZACION DEL BLE
  Serial.println("Comenzanco la aplicacion BLE de Arduino...");

  BLEDevice::init("");

  pClient  = BLEDevice::createClient();
  Serial.println(" - Created client");
  pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  
  //IINICIALIZACION WI-FI
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("\nDireccion IP: ");
  Serial.println(WiFi.localIP());

  //Initializing ntp server
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

}

  
void loop() {

  
  Serial.println();
  Serial.println("Escaneo BLE reiniciado.....");
  deviceFound = false;
  BLEScanResults scanResults = pBLEScan->start(30);
  
  //OBTENCION DE LA FECHA Y HORA
  struct tm timeinfo;
  H = timeinfo.tm_hour;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Falla en obtener la hora");
    darktime = false;
  }
  
  //CONDICIONAL DE FRANJAS HORARIAS
  else if ( ( H < 24 && H > 17 ) || (H < 5) ){
    Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
    darktime = true;
    }
  Serial.println(darktime);
  Serial.println(H);
  
  //CONDICIONAL SI ES MAS DE LAS 6 PM Y EL DISPOSITIVO FUE ENCONTRADO
  if (deviceFound && cont && darktime) {  
    cont = false;
    WiFiClientSecure client;
    Serial.print("\nConectando a ");
    Serial.println(host);
    
    if (!client.connect(host, httpsPort)) {
      Serial.println("Conexion fallida");
      return;
    }
 
    //ENVIAR MENSAJE IFTTT
    Serial.print("Requerimiento a IFTTT: ");
    Serial.println(url);
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +

               "Host: " + host + "\r\n" +

               "User-Agent: BuildFailureDetectorESP32\r\n" +

               "Connection: close\r\n\r\n");
    Serial.println("Requerimiento enviado");
    
    //CONEXION CON IFTTT
    while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
        Serial.println("headers received");
        break;
        }
      }
    String line = client.readStringUntil('\n');
    
    Serial.println("La respuesta fue:");
    Serial.println(line);
    Serial.println("==========");
    
    //Serial.println("Esperando 60 segundos");
    //Serial.println("==========");
    delay(60000);
  }
  
  //VOLVER A BUSCAR EL DISPOSITIVO
  else if (!deviceFound) {
    Serial.println("Dispositivo no encontrado");
    cont = true;
  }
  else if (!cont && deviceFound) {
    Serial.println("\nYa se ha enviado el POST");
    delay(600000);
  }
}
